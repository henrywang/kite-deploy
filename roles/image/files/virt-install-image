#!/bin/bash
set -ex

if [ "$#" -lt 2 ]; then
    echo >&2 "Usage: virt-install-fedora IMAGE URL"
    exit 1
fi

out=$1
ks=$2
url=$3

qemu-img create -f qcow2 "$out" 12G

connect="--connect=qemu:///session"
name=$(basename $1)-builder

cleanup_builder_vm () {
  if virsh $connect list --state-running --name | grep -q $name; then
      virsh $connect destroy $name
  fi
  if virsh $connect list --all --name | grep -q $name; then
      virsh $connect undefine $name
  fi
}

# Using virt-install is fundamentally an interactive process.  We
# expect the installation to finish unattended, but it might drop into
# an emergency shell upon unexpected errors, for example.  Thus, we
# run it under 'expect' and catch a few known scenarios that require
# special handling.
#
# (Also, virt-install works best when it has a tty.)

supervised_virt_install () {
expect -- - virt-install "$@" <<'EOF'
eval spawn $argv
set timeout -1
expect {
  "emergency mode" { send_user "\n\n\n\nABORT - emergency shell\n"
                     exit 1
                   }
  "Please make your choice" { send_user "\n\n\n\nABORT - Anaconda stopped\n"
                              exit 1
                            }
  "Please make a selection" { send_user "\n\n\n\nABORT - Anaconda stopped\n"
                              exit 1
                            }
}
EOF
}

cleanup_builder_vm

supervised_virt_install $connect \
                        --initrd-inject=$ks \
                        --extra-args="ks=file:/$ks console=ttyS0,115200" \
                        --name=$name \
                        --disk "path=$out,format=qcow2" \
                        --ram 4096 \
                        --vcpus=1 \
                        --os-type linux \
                        --os-variant fedora21 \
                        --location="$url" \
                        --nographics \
                        --noreboot

# rm $ks

cleanup_builder_vm
